// ok
object InvalidChannelTest extends App {
  import Utils._
  import Implicits._

  val board = Array(
    '.', 'X', '.', 'X', '.', 'X', 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',

    'O', 'O', 'X', 'X', '.', '.', 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',

    'O', 'O', 'X', 'O', 'X', '.', 'X', 'X', '.', 'X', 'X', '.', 'X', '.', '.', '.', '.', '.', '.',

    'X', 'O', 'O', 'O', 'X', 'X', 'O', 'O', 'X', '.', 'X', 'X', '.', 'X', 'X', '.', 'X', '.', '.',

    'X', 'X', 'O', 'X', '.', 'X', 'O', '.', 'X', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.',

    '.', '.', 'X', 'X', 'X', '.', 'X', '.', 'X', '.', 'X', '.', 'X', '.', '.', '.', '.', '.', '.',

    'X', 'X', '.', '.', 'X', 'X', 'X', 'X', '.', '.', '.', '.', 'X', 'X', '.', '.', '.', '.', '.',

    'X', 'O', 'O', 'O', 'X', 'O', 'X', 'X', 'X', '.', '.', '.', '.', '.', 'X', 'X', '.', '.', '.',

    'X', 'X', 'X', 'X', 'O', 'O', 'O', 'O', 'O', 'X', '.', 'X', '.', 'X', '.', '.', '.', '.', '.',

    'X', 'X', 'X', 'O', 'O', 'O', '.', 'O', 'X', 'X', '.', 'X', 'X', 'X', '.', 'X', '.', '.', '.',

    'X', 'O', 'O', 'O', '.', '.', '.', 'O', 'X', '.', 'X', '.', '.', '.', '.', '.', 'X', '.', '.',

    'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'X', '.', '.', 'X', 'X', '.', '.', '.', '.', '.', '.',

    'O', 'O', 'X', 'X', 'O', '.', '.', '.', 'O', 'X', '.', 'X', '.', '.', '.', '.', '.', '.', '.',

    'X', 'O', 'X', '.', 'X', 'O', 'O', '.', 'O', 'X', '.', 'X', '.', '.', '.', '.', '.', '.', '.',

    'X', 'X', '.', 'X', '.', 'X', 'O', '.', 'O', 'X', '.', 'X', '.', '.', '.', '.', 'X', '.', '.',

    '.', 'X', '.', 'X', 'X', 'X', 'O', 'O', 'O', 'X', 'X', 'X', '.', '.', '.', '.', '.', '.', '.',

    '.', 'X', 'X', '.', 'X', 'O', 'O', 'X', 'X', 'X', '.', '.', '.', '.', '.', 'X', '.', '.', '.',

    '.', '.', 'X', 'X', 'O', 'O', 'O', 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',

    '.', '.', '.', 'X', 'X', 'O', 'O', 'X', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'
  )

  board.printState(19, 19, None, None)
  val s = State(board, rankB = None, rankW = None, prevMoves = Array(Move(Color.Black, 1, 1, true)))

  s.invalidChannel.printState(19, 19, None, None)
}
